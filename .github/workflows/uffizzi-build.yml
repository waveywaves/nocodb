
name: Build PR Image for Uffizzi
on:
  pull_request:
    types: [opened,synchronize,reopened,closed]

# on:
#   # Triggered by release-nocodb.yml / release-nightly-dev.yml / release-pr.yml
#   workflow_call:
#     inputs:
#       tag:
#         description: "Docker image tag"
#         required: true
#         type: string
#       targetEnv:
#         description: "Target Environment"
#         required: true
#         type: string
#       isDaily:
#         description: "Is it triggered by daily schedule"
#         required: false
#         type: string
#       currentVersion:
#         description: "The current NocoDB version"
#         required: false
#         type: string

jobs:
  # build-nocodb:
  #   runs-on: ubuntu-latest
  #   env:
  #     working-directory: ./packages/nocodb
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ github.ref }}

  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.15.0

  #     - name: upgrade packages for nightly build or pr build
  #       if: ${{ github.event.inputs.targetEnv == 'DEV' || inputs.targetEnv == 'DEV' }}
  #       run: |
  #         export NODE_OPTIONS="--max_old_space_size=16384"
  #         targetEnv=${{ github.event.inputs.targetEnv || inputs.targetEnv }} targetVersion=${{ github.event.inputs.tag || inputs.tag }} node scripts/bumpNocodbSdkVersion.js
  #         cd packages/nocodb-sdk
  #         npm install && npm run build
  #         cd ../..
  #         targetEnv=${{ github.event.inputs.targetEnv || inputs.targetEnv }} node scripts/upgradeNocodbSdk.js && 
  #         targetEnv=${{ github.event.inputs.targetEnv || inputs.targetEnv }} targetVersion=${{ github.event.inputs.tag || inputs.tag }} node scripts/bumpNcGuiVersion.js &&
  #         cd packages/nc-gui
  #         npm install
  #         targetEnv=${{ github.event.inputs.targetEnv || inputs.targetEnv }} targetVersion=${{ github.event.inputs.tag || inputs.tag }} npm run build:copy
  #         cd ../..
  #         targetEnv=${{ github.event.inputs.targetEnv || inputs.targetEnv }} node scripts/upgradeNcGui.js

  #     - uses: bahmutov/npm-install@v1
  #       with:
  #         working-directory: ${{ env.working-directory }}

  #     - name: Build nocodb and docker files
  #       run: |
  #         npm run build
  #         npm run docker:build
  #       working-directory: ${{ env.working-directory }}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Generate UUID image name
  #       id: uuid
  #       run: echo "UUID_TAG=$(uuidgen)" >> $GITHUB_ENV
      
  #     - name: Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         # An anonymous, emphemeral registry built on ttl.sh
  #         images: registry.uffizzi.com/${{ env.UUID_TAG }}
  #         tags: type=raw,value=60d
      
  #     - name: Build and Push Image to Uffizzi Ephemeral Registry
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ${{ env.working-directory }}
  #         build-args: NC_VERSION=${{ steps.get-docker-repository.outputs.DOCKER_BUILD_TAG }}
  #         platforms: linux/amd64,linux/arm64,linux/arm/v7
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache-new
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #       # Temp fix
  #       # https://github.com/docker/build-push-action/issues/252
  #       # https://github.com/moby/buildkit/issues/1896
  #     - name: Move cache
  #       run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  render-compose-file:
    name: Render Docker Compose File
    # Pass output of this workflow to another triggered by `workflow_run` event.
    runs-on: ubuntu-latest
    # needs: 
    #   - build-nocodb
    outputs:
      compose-file-cache-key:  ${{ env.COMPOSE_FILE_HASH }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          NOCODB_IMAGE=$(echo ${{ needs.build-nocodb.outputs.tags }})
          export NOCODB_IMAGE
          # Render simple template from environment variables.
          envsubst < .github/uffizzi/docker-compose.uffizzi.yml > docker-compose.rendered.yml
          cat docker-compose.rendered.yml
      - name: Upload Rendered Compose File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec 
          path: docker-compose.rendered.yml
          retention-days: 2
      - name: Serialize PR Event to File
        run:  |
          cat << EOF > event.json
          ${{ toJSON(github.event) }} 
          
          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2
      
  delete-preview:
    name: Call for Preview Deletion
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
      # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
      - name: Serialize PR Event to File
        run:  |
          cat << EOF > event.json
          ${{ toJSON(github.event) }} 
          
          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2